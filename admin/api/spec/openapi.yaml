openapi: 3.1.0
info:
    title: Replate Admin API
    version: "1.0.0"
    description: |
        Admin API for Replate workforce administrators. Orchestrates Auth0 Organizations, invitations, and mirrors
        organizations in Cloudflare D1. Tokens are issued to workforce admins and include scopes as noted.
servers:
    - url: https://api.admin.replate.dev
      description: Production
    - url: https://api.admin.dev.local
      description: Local/dev
security:
    - oauth2:
          [
              read:organizations,
              update:organizations,
              create:organizations,
              read:sso_invitations,
              create:sso_invitations,
              delete:sso_invitations,
              read:users,
              update:users,
          ]
paths:
    /organizations:
        get:
            summary: List organizations
            description: Lists organizations known to Replate from D1.
            operationId: listOrganizations
            security:
                - oauth2: [read:organizations]
            parameters:
                - in: query
                  name: org_type
                  schema:
                      $ref: "#/components/schemas/OrgType"
                  description: Filter by organization type
                - in: query
                  name: sso_status
                  schema:
                      $ref: "#/components/schemas/SsoStatus"
                  description: Filter by SSO status
                - in: query
                  name: q
                  schema:
                      type: string
                  description: Search by name or domain
                - in: query
                  name: page
                  schema:
                      type: integer
                      minimum: 1
                  description: Page number (1-based)
                - in: query
                  name: per_page
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 100
                  description: Page size (default 20)
            responses:
                "200":
                    description: A list of organizations
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/OrganizationSummary"
                "401": {$ref: "#/components/responses/Unauthorized"}
                "403": {$ref: "#/components/responses/Forbidden"}
                "5XX": {$ref: "#/components/responses/ServerError"}
        post:
            summary: Create organization
            description: Creates an organization in Auth0 and mirrors it in D1 (no invitation is sent).
            operationId: createOrganization
            security:
                - oauth2: [create:organizations]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/OrganizationCreateRequest"
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    auth0_org_id:
                                        type: string
                "400": {$ref: "#/components/responses/BadRequest"}
                "401": {$ref: "#/components/responses/Unauthorized"}
                "403": {$ref: "#/components/responses/Forbidden"}
                "409": {$ref: "#/components/responses/Conflict"}
                "502": {$ref: "#/components/responses/UpstreamError"}
    /organizations/{orgId}:
        get:
            summary: Get organization
            description: Retrieves details for a specific organization from D1.
            operationId: getOrganization
            security:
                - oauth2: [read:organizations]
            parameters:
                - $ref: "#/components/parameters/OrgIdPathParam"
            responses:
                "200":
                    description: Organization details
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Organization"
                "401": {$ref: "#/components/responses/Unauthorized"}
                "403": {$ref: "#/components/responses/Forbidden"}
                "404": {$ref: "#/components/responses/NotFound"}
                "5XX": {$ref: "#/components/responses/ServerError"}
        patch:
            summary: Update organization
            description: Updates Replate-managed organization metadata in D1 and optionally Auth0 org name/domain.
            operationId: updateOrganization
            security:
                - oauth2: [update:organizations]
            parameters:
                - $ref: "#/components/parameters/OrgIdPathParam"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/OrganizationUpdateRequest"
            responses:
                "200":
                    description: Update result
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UpdatedResult"
                "400": {$ref: "#/components/responses/BadRequest"}
                "401": {$ref: "#/components/responses/Unauthorized"}
                "403": {$ref: "#/components/responses/Forbidden"}
                "404": {$ref: "#/components/responses/NotFound"}
                "409": {$ref: "#/components/responses/Conflict"}
                "502": {$ref: "#/components/responses/UpstreamError"}
        delete:
            summary: Archive organization
            description: Soft-deletes organization rows in D1 and removes remaining Auth0 org if applicable.
            operationId: archiveOrganization
            security:
                - oauth2: [update:organizations]
            parameters:
                - $ref: "#/components/parameters/OrgIdPathParam"
            responses:
                "200":
                    description: Archived
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    archived:
                                        type: boolean
                                        example: true
                "401": {$ref: "#/components/responses/Unauthorized"}
                "403": {$ref: "#/components/responses/Forbidden"}
                "404": {$ref: "#/components/responses/NotFound"}
                "5XX": {$ref: "#/components/responses/ServerError"}
    /organizations/{orgId}/sso-invitations:
        get:
            summary: List SSO invitations for organization
            description: Lists invitations and statuses for a specific organization.
            operationId: listInvitations
            security:
                - oauth2: [read:sso_invitations]
            parameters:
                - $ref: "#/components/parameters/OrgIdPathParam"
                - in: query
                  name: status
                  schema:
                      type: string
                      enum: [invited, configured, active, expired]
                  description: Filter by invitation/SSO status
                - in: query
                  name: org_type
                  schema:
                      $ref: "#/components/schemas/OrgType"
                  description: Filter by organization type
                - in: query
                  name: q
                  schema:
                      type: string
                  description: Search by organization name or domain
            responses:
                "200":
                    description: A list of invitations
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/InvitationSummary"
                "401": {$ref: "#/components/responses/Unauthorized"}
                "403": {$ref: "#/components/responses/Forbidden"}
                "502": {$ref: "#/components/responses/UpstreamError"}
        post:
            summary: Create SSO invitation for organization
            description: Initiates a self-service SSO invitation for the specified organization.
            operationId: createInvitation
            security:
                - oauth2: [create:sso_invitations, update:organizations]
            parameters:
                - $ref: "#/components/parameters/OrgIdPathParam"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/InvitationCreateRequest"
            responses:
                "201":
                    description: Invitation created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/InvitationCreateResponse"
                "400": {$ref: "#/components/responses/BadRequest"}
                "401": {$ref: "#/components/responses/Unauthorized"}
                "403": {$ref: "#/components/responses/Forbidden"}
                "409": {$ref: "#/components/responses/Conflict"}
                "502": {$ref: "#/components/responses/UpstreamError"}
    /organizations/{orgId}/sso-invitations/{invId}:
        delete:
            summary: Delete SSO invitation for organization
            description: Deletes an invitation and revokes it from Auth0.
            operationId: deleteInvitation
            security:
                - oauth2: [delete:sso_invitations]
            parameters:
                - $ref: "#/components/parameters/OrgIdPathParam"
                - in: path
                  name: invId
                  required: true
                  schema:
                      type: string
                  description: Invitation ID
            responses:
                "200":
                    description: Archived
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    archived:
                                        type: boolean
                                        example: true
                "401": {$ref: "#/components/responses/Unauthorized"}
                "403": {$ref: "#/components/responses/Forbidden"}
    /users:
        get:
            summary: List users
            description: Lists users with optional filters and pagination.
            operationId: listUsers
            security:
                - oauth2: [read:users]
            parameters:
                - in: query
                  name: q
                  schema:
                      type: string
                  description: Search by email or name
                - in: query
                  name: org_id
                  schema:
                      type: string
                  description: Filter by organization's Auth0 ID
                - in: query
                  name: page
                  schema:
                      type: integer
                      minimum: 1
                  description: Page number (1-based)
                - in: query
                  name: per_page
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 100
                  description: Page size (default 25)
            responses:
                "200":
                    description: A list of users
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/User"
                "401": { $ref: "#/components/responses/Unauthorized" }
                "403": { $ref: "#/components/responses/Forbidden" }
                "5XX": { $ref: "#/components/responses/ServerError" }
    /users/{id}:
        get:
            summary: Get user
            description: Retrieve a single user by D1 id.
            operationId: getUser
            security:
                - oauth2: [read:users]
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                "200":
                    description: User
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                "401": { $ref: "#/components/responses/Unauthorized" }
                "403": { $ref: "#/components/responses/Forbidden" }
                "404": { $ref: "#/components/responses/NotFound" }
                "5XX": { $ref: "#/components/responses/ServerError" }
        patch:
            summary: Update user
            description: Update user attributes managed by Replate.
            operationId: updateUser
            security:
                - oauth2: [update:users]
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserUpdateRequest"
            responses:
                "200":
                    description: Update result
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UpdatedResult"
                "400": { $ref: "#/components/responses/BadRequest" }
                "401": { $ref: "#/components/responses/Unauthorized" }
                "403": { $ref: "#/components/responses/Forbidden" }
                "404": { $ref: "#/components/responses/NotFound" }
                "5XX": { $ref: "#/components/responses/ServerError" }
components:
    securitySchemes:
        oauth2:
            type: oauth2
            flows:
                authorizationCode:
                    authorizationUrl: https://id.replate.dev/authorize
                    tokenUrl: https://id.replate.dev/oauth/token
                    scopes:
                        read:organizations: Read organizations
                        update:organizations: Update organizations
                        create:organizations: Create organizations
                        read:sso_invitations: Read SSO invitations
                        create:sso_invitations: Create SSO invitations
                        delete:sso_invitations: Delete SSO invitations
                        read:users: Read users
                        update:users: Update users
    parameters:
        OrgIdPathParam:
            in: path
            name: orgId
            required: true
            schema:
                type: string
            description: Auth0 organization ID (e.g., org_abc123)
    responses:
        BadRequest:
            description: Validation error
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Error"
        Unauthorized:
            description: Authentication required
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Error"
        Forbidden:
            description: Insufficient scope or not allowed
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Error"
        NotFound:
            description: Resource not found
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Error"
        Conflict:
            description: Conflict (e.g., duplicate domain)
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Error"
        UpstreamError:
            description: Upstream dependency (Auth0 Management API) unavailable
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Error"
        ServerError:
            description: Server error
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Error"
    schemas:
        OrgType:
            type: string
            enum: [supplier, community, logistics]
        SsoStatus:
            type: string
            enum: [not_started, invited, configured, active, expired]
        OrganizationSummary:
            type: object
            properties:
                auth0_org_id:
                    type: string
                name:
                    type: string
                org_type:
                    $ref: "#/components/schemas/OrgType"
                domain:
                    type: string
                    format: hostname
                sso_status:
                    $ref: "#/components/schemas/SsoStatus"
        Organization:
            allOf:
                - $ref: "#/components/schemas/OrganizationSummary"
                - type: object
                  properties:
                      pickup_address:
                          type: string
                          nullable: true
                      pickup_schedule:
                          type: string
                          description: JSON string for suppliers
                          nullable: true
                      delivery_address:
                          type: string
                          nullable: true
                      delivery_schedule:
                          type: string
                          description: JSON string for communities
                          nullable: true
                      coverage_regions:
                          type: string
                          nullable: true
                      vehicle_types:
                          type: array
                          items: {type: string}
                          nullable: true
        OrganizationCreateRequest:
            type: object
            required: [name, org_type, domain]
            properties:
                name:
                    type: string
                org_type:
                    $ref: "#/components/schemas/OrgType"
                domain:
                    type: string
                    format: hostname
        OrganizationUpdateRequest:
            type: object
            properties:
                name:
                    type: string
                domain:
                    type: string
                    format: hostname
                metadata:
                    type: object
                    properties:
                        org_type:
                            $ref: "#/components/schemas/OrgType"
                        pickup_address:
                            type: string
                        delivery_address:
                            type: string
                        coverage_regions:
                            type: string
                        vehicle_types:
                            type: array
                            items: {type: string}
        UpdatedResult:
            type: object
            properties:
                updated:
                    type: integer
                    minimum: 0
        InvitationCreateRequest:
            type: object
            required: [accept_idp_init_saml, ttl, domain_verification]
            properties:
                accept_idp_init_saml:
                    type: boolean
                ttl:
                    type: number
                    description: Time to live (seconds) from creation time
                domain_verification:
                    type: boolean
        InvitationCreateResponse:
            type: object
            properties:
                invitation_id:
                    type: string
                auth0_org_id:
                    type: string
                link:
                    type: string
                    format: uri
        InvitationSummary:
            type: object
            properties:
                invitation_id:
                    type: string
                auth0_org_id:
                    type: string
                name:
                    type: string
                org_type:
                    $ref: "#/components/schemas/OrgType"
                domain:
                    type: string
                    format: hostname
                link:
                    type: string
                    format: uri
                sso_status:
                    $ref: "#/components/schemas/SsoStatus"
                created_at:
                    type: string
                    format: date-time
        User:
            type: object
            properties:
                id:
                    type: integer
                auth0_user_id:
                    type: string
                email:
                    type: string
                    format: email
                email_verified:
                    type: boolean
                name:
                    type: string
                picture:
                    type: string
                donor:
                    type: boolean
                org_role:
                    type: string
                    enum: [admin, member, driver]
                org_status:
                    type: string
                    enum: [invited, active, suspended]
                consumer_lifecycle_stage:
                    type: string
                    enum: [visitor, registered, donor_first_time, donor_repeat, advocate]
                org_id:
                    type: string
                org_name:
                    type: string
        UserUpdateRequest:
            type: object
            properties:
                name:
                    type: string
                picture:
                    type: string
                email_verified:
                    type: boolean
                donor:
                    type: boolean
                org_role:
                    type: string
                    enum: [admin, member, driver]
                org_status:
                    type: string
                    enum: [invited, active, suspended]
                consumer_lifecycle_stage:
                    type: string
                    enum: [visitor, registered, donor_first_time, donor_repeat, advocate]
                org_id:
                    type: string
        Error:
            type: object
            properties:
                error:
                    type: string
                error_description:
                    type: string
            additionalProperties: false
