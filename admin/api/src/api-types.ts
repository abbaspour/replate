/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/organizations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organizations
         * @description Lists organizations known to Replate from D1.
         */
        get: operations['listOrganizations'];
        put?: never;
        /**
         * Create organization
         * @description Creates an organization in Auth0 and mirrors it in D1 (no invitation is sent).
         */
        post: operations['createOrganization'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{orgId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get organization
         * @description Retrieves details for a specific organization from D1.
         */
        get: operations['getOrganization'];
        put?: never;
        post?: never;
        /**
         * Archive organization
         * @description Soft-deletes organization rows in D1 and removes remaining Auth0 org if applicable.
         */
        delete: operations['archiveOrganization'];
        options?: never;
        head?: never;
        /**
         * Update organization
         * @description Updates Replate-managed organization metadata in D1 and optionally Auth0 org name/domain.
         */
        patch: operations['updateOrganization'];
        trace?: never;
    };
    '/organizations/invitations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organization invitations
         * @description Lists invitations and statuses, joining Auth0 invitations with D1 org mirror.
         */
        get: operations['listInvitations'];
        put?: never;
        /**
         * Create organization invitation
         * @description Creates or finds the organization in Auth0, sends invitation, and mirrors org in D1 with sso_status=invited.
         */
        post: operations['createInvitation'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        OrgType: 'supplier' | 'community' | 'logistics';
        /** @enum {string} */
        SsoStatus: 'not_started' | 'invited' | 'configured' | 'active';
        OrganizationSummary: {
            auth0_org_id?: string;
            name?: string;
            org_type?: components['schemas']['OrgType'];
            /** Format: hostname */
            domain?: string;
            sso_status?: components['schemas']['SsoStatus'];
        };
        Organization: components['schemas']['OrganizationSummary'] & {
            pickup_address?: string | null;
            /** @description JSON string for suppliers */
            pickup_schedule?: string | null;
            delivery_address?: string | null;
            /** @description JSON string for communities */
            delivery_schedule?: string | null;
            coverage_regions?: string | null;
            vehicle_types?: string[] | null;
        };
        OrganizationCreateRequest: {
            name: string;
            org_type: components['schemas']['OrgType'];
            /** Format: hostname */
            domain: string;
        };
        OrganizationUpdateRequest: {
            name?: string;
            /** Format: hostname */
            domain?: string;
            metadata?: {
                org_type?: components['schemas']['OrgType'];
                pickup_address?: string;
                delivery_address?: string;
                coverage_regions?: string;
                vehicle_types?: string[];
            };
        };
        InvitationCreateRequest: {
            org_type: components['schemas']['OrgType'];
            name: string;
            /** Format: hostname */
            domain: string;
            /** Format: email */
            admin_email: string;
        };
        InvitationCreateResponse: {
            invitation_id?: string;
            auth0_org_id?: string;
            /** @enum {string} */
            status?: 'invited';
        };
        InvitationSummary: {
            invitation_id?: string;
            auth0_org_id?: string;
            name?: string;
            org_type?: components['schemas']['OrgType'];
            /** Format: hostname */
            domain?: string;
            sso_status?: components['schemas']['SsoStatus'];
            /** Format: date-time */
            sent_at?: string;
        };
        Error: {
            error?: string;
            error_description?: string;
        };
    };
    responses: {
        /** @description Validation error */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
        /** @description Authentication required */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
        /** @description Insufficient scope or not allowed */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
        /** @description Conflict (e.g., duplicate domain) */
        Conflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
        /** @description Upstream dependency (Auth0 Management API) unavailable */
        UpstreamError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
        /** @description Server error */
        ServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
    };
    parameters: {
        /** @description Auth0 organization ID (e.g., org_abc123) */
        OrgIdPathParam: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listOrganizations: {
        parameters: {
            query?: {
                /** @description Filter by organization type */
                org_type?: components['schemas']['OrgType'];
                /** @description Filter by SSO status */
                sso_status?: components['schemas']['SsoStatus'];
                /** @description Search by name or domain */
                q?: string;
                /** @description Page number (1-based) */
                page?: number;
                /** @description Page size (default 20) */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of organizations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['OrganizationSummary'][];
                };
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            '5XX': components['responses']['ServerError'];
        };
    };
    createOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['OrganizationCreateRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        auth0_org_id?: string;
                    };
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            409: components['responses']['Conflict'];
            502: components['responses']['UpstreamError'];
        };
    };
    getOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Auth0 organization ID (e.g., org_abc123) */
                orgId: components['parameters']['OrgIdPathParam'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Organization'];
                };
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
            '5XX': components['responses']['ServerError'];
        };
    };
    archiveOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Auth0 organization ID (e.g., org_abc123) */
                orgId: components['parameters']['OrgIdPathParam'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Archived */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example true */
                        archived?: boolean;
                    };
                };
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
            '5XX': components['responses']['ServerError'];
        };
    };
    updateOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Auth0 organization ID (e.g., org_abc123) */
                orgId: components['parameters']['OrgIdPathParam'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['OrganizationUpdateRequest'];
            };
        };
        responses: {
            /** @description Updated organization */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Organization'];
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
            409: components['responses']['Conflict'];
            502: components['responses']['UpstreamError'];
        };
    };
    listInvitations: {
        parameters: {
            query?: {
                /** @description Filter by invitation/SSO status */
                status?: 'invited' | 'configured' | 'active';
                /** @description Filter by organization type */
                org_type?: components['schemas']['OrgType'];
                /** @description Search by organization name or domain */
                q?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of invitations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvitationSummary'][];
                };
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            502: components['responses']['UpstreamError'];
        };
    };
    createInvitation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['InvitationCreateRequest'];
            };
        };
        responses: {
            /** @description Invitation created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvitationCreateResponse'];
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            409: components['responses']['Conflict'];
            502: components['responses']['UpstreamError'];
        };
    };
}
