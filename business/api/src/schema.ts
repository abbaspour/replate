/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Replate Business API
 * Business API for Replate Organizations (Suppliers, Communities, Logistics).
Exposes organization metadata, pickup jobs, pickup schedules, and community delivery schedules
to authenticated business users. All endpoints require an Auth0 access token (audience `business.api`).

 * OpenAPI spec version: 1.0.0
 */
import * as zod from 'zod';

/**
 * Retrieves details for a specific organization. Caller must be a member of the organization.
 * @summary Get organization details
 */
export const getOrganizationParams = zod.object({
  "orgId": zod.string().describe('Auth0 Organization ID (e.g., org_abc123)')
})

export const getOrganizationResponse = zod.object({
  "auth0_org_id": zod.string(),
  "org_type": zod.enum(['supplier', 'community', 'logistics']),
  "name": zod.string(),
  "domain": zod.string().optional().describe('Primary domain used for HRD'),
  "pickup_address": zod.string().nullish(),
  "delivery_address": zod.string().nullish(),
  "coverage_regions": zod.string().nullish().describe('Free-form regions list or JSON'),
  "vehicle_types": zod.array(zod.string()).nullish(),
  "pickup_schedule": zod.record(zod.string(), zod.any()).nullish(),
  "delivery_schedule": zod.record(zod.string(), zod.any()).nullish()
})


/**
 * Updates organization details managed by Replate (e.g., addresses and schedules in D1).
Only Admins of the organization may update. Auth0 org name/domain updates are not part of this API.

 * @summary Update organization metadata
 */
export const updateOrganizationParams = zod.object({
  "orgId": zod.string().describe('Auth0 Organization ID (e.g., org_abc123)')
})

export const updateOrganizationBody = zod.object({
  "metadata": zod.object({
  "pickup_address": zod.string().optional(),
  "delivery_address": zod.string().optional(),
  "coverage_regions": zod.string().optional(),
  "vehicle_types": zod.array(zod.string()).optional(),
  "pickup_schedule": zod.record(zod.string(), zod.any()).optional(),
  "delivery_schedule": zod.record(zod.string(), zod.any()).optional()
}).optional()
})

export const updateOrganizationResponse = zod.object({
  "auth0_org_id": zod.string(),
  "org_type": zod.enum(['supplier', 'community', 'logistics']),
  "name": zod.string(),
  "domain": zod.string().optional().describe('Primary domain used for HRD'),
  "pickup_address": zod.string().nullish(),
  "delivery_address": zod.string().nullish(),
  "coverage_regions": zod.string().nullish().describe('Free-form regions list or JSON'),
  "vehicle_types": zod.array(zod.string()).nullish(),
  "pickup_schedule": zod.record(zod.string(), zod.any()).nullish(),
  "delivery_schedule": zod.record(zod.string(), zod.any()).nullish()
})


/**
 * Lists pickup jobs filtered by the caller's organization (from `org_id` claim). Drivers may see only their assigned jobs.

 * @summary List pickup jobs for caller's organization
 */
export const listJobsQueryPerPageMax = 100;

export const listJobsQueryParams = zod.object({
  "status": zod.enum(['New', 'Triage', 'Logistics Assigned', 'In Transit', 'Delivered', 'Canceled']).optional().describe('Optional filter by job status'),
  "page": zod.number().min(1).optional().describe('Page number (1-based)'),
  "per_page": zod.number().min(1).max(listJobsQueryPerPageMax).optional().describe('Page size (default 20)')
})

export const listJobsResponseItem = zod.object({
  "id": zod.number(),
  "schedule_id": zod.number().nullish(),
  "status": zod.enum(['New', 'Triage', 'Logistics Assigned', 'In Transit', 'Delivered', 'Canceled']),
  "pickup_window_start": zod.iso.datetime({}),
  "pickup_window_end": zod.iso.datetime({}),
  "food_category": zod.array(zod.string()),
  "estimated_weight_kg": zod.number(),
  "packaging": zod.string().nullish(),
  "handling_notes": zod.string().nullish(),
  "supplier_org_id": zod.string().describe('Auth0 org ID for supplier'),
  "community_org_id": zod.string().nullish().describe('Auth0 org ID for destination community'),
  "logistics_org_id": zod.string().nullish().describe('Auth0 org ID for logistics partner'),
  "driver_user_id": zod.string().nullish().describe('D1 user id for assigned driver')
})
export const listJobsResponse = zod.array(listJobsResponseItem)


/**
 * Creates a new ad-hoc pickup job (no schedule_id). Supplier Admin/Member roles only.
 * @summary Create ad-hoc pickup job
 */
export const createJobBody = zod.object({
  "pickup_window_start": zod.iso.datetime({}),
  "pickup_window_end": zod.iso.datetime({}),
  "food_category": zod.array(zod.string()),
  "estimated_weight_kg": zod.number(),
  "packaging": zod.string().optional(),
  "handling_notes": zod.string().optional(),
  "community_org_id": zod.string().optional().describe('Optional destination community Auth0 org id')
})


/**
 * Marks a job as in-progress or completed. Restricted to tokens with scope `update:pickups` and role `driver`.

 * @summary Update job status (driver)
 */
export const updateJobStatusParams = zod.object({
  "id": zod.number().min(1).describe('Pickup Job numeric identifier')
})

export const updateJobStatusBody = zod.object({
  "status": zod.enum(['In Transit', 'Delivered'])
}).describe('Only driver-triggered status transitions are supported here')

export const updateJobStatusResponse = zod.object({
  "id": zod.number(),
  "schedule_id": zod.number().nullish(),
  "status": zod.enum(['New', 'Triage', 'Logistics Assigned', 'In Transit', 'Delivered', 'Canceled']),
  "pickup_window_start": zod.iso.datetime({}),
  "pickup_window_end": zod.iso.datetime({}),
  "food_category": zod.array(zod.string()),
  "estimated_weight_kg": zod.number(),
  "packaging": zod.string().nullish(),
  "handling_notes": zod.string().nullish(),
  "supplier_org_id": zod.string().describe('Auth0 org ID for supplier'),
  "community_org_id": zod.string().nullish().describe('Auth0 org ID for destination community'),
  "logistics_org_id": zod.string().nullish().describe('Auth0 org ID for logistics partner'),
  "driver_user_id": zod.string().nullish().describe('D1 user id for assigned driver')
})


/**
 * Fetches pickup schedules for the caller's supplier organization.
 * @summary List pickup schedules
 */
export const listPickupSchedulesQueryPerPageMax = 100;

export const listPickupSchedulesQueryParams = zod.object({
  "page": zod.number().min(1).optional().describe('Page number (1-based)'),
  "per_page": zod.number().min(1).max(listPickupSchedulesQueryPerPageMax).optional().describe('Page size (default 20)')
})

export const listPickupSchedulesResponseItem = zod.object({
  "id": zod.number(),
  "supplier_id": zod.string().describe('Auth0 org ID for supplier'),
  "default_community_id": zod.string().nullish(),
  "is_active": zod.boolean(),
  "cron_expression": zod.string(),
  "pickup_time_of_day": zod.string().describe('Time of day (HH:mm)'),
  "pickup_duration_minutes": zod.number(),
  "default_food_category": zod.array(zod.string()).optional(),
  "default_estimated_weight_kg": zod.number().optional()
})
export const listPickupSchedulesResponse = zod.array(listPickupSchedulesResponseItem)


/**
 * Creates a new recurring pickup schedule for the caller's supplier organization.
 * @summary Create pickup schedule
 */
export const createPickupScheduleBodyIsActiveDefault = true;export const createPickupScheduleBodyPickupDurationMinutesMin = 5;

export const createPickupScheduleBody = zod.object({
  "default_community_id": zod.string().optional(),
  "is_active": zod.boolean().default(createPickupScheduleBodyIsActiveDefault),
  "cron_expression": zod.string(),
  "pickup_time_of_day": zod.string(),
  "pickup_duration_minutes": zod.number().min(createPickupScheduleBodyPickupDurationMinutesMin),
  "default_food_category": zod.array(zod.string()).optional(),
  "default_estimated_weight_kg": zod.number().optional()
})


/**
 * Updates an existing pickup schedule.
 * @summary Update pickup schedule
 */
export const updatePickupScheduleParams = zod.object({
  "scheduleId": zod.number().min(1).describe('Pickup Schedule numeric identifier')
})

export const updatePickupScheduleBody = zod.object({
  "default_community_id": zod.string().optional(),
  "is_active": zod.boolean().optional(),
  "cron_expression": zod.string().optional(),
  "pickup_time_of_day": zod.string().optional(),
  "pickup_duration_minutes": zod.number().optional(),
  "default_food_category": zod.array(zod.string()).optional(),
  "default_estimated_weight_kg": zod.number().optional()
})

export const updatePickupScheduleResponse = zod.object({
  "id": zod.number(),
  "supplier_id": zod.string().describe('Auth0 org ID for supplier'),
  "default_community_id": zod.string().nullish(),
  "is_active": zod.boolean(),
  "cron_expression": zod.string(),
  "pickup_time_of_day": zod.string().describe('Time of day (HH:mm)'),
  "pickup_duration_minutes": zod.number(),
  "default_food_category": zod.array(zod.string()).optional(),
  "default_estimated_weight_kg": zod.number().optional()
})


/**
 * Returns delivery schedules associated with the caller's community organization.
 * @summary List delivery schedules (community)
 */
export const listDeliverySchedulesResponseItem = zod.object({
  "id": zod.number(),
  "community_id": zod.string().describe('Auth0 org ID for community'),
  "is_active": zod.boolean(),
  "cron_expression": zod.string(),
  "delivery_time_of_day": zod.string()
})
export const listDeliverySchedulesResponse = zod.array(listDeliverySchedulesResponseItem)


/**
 * Updates a delivery schedule for the caller's community organization.
 * @summary Update delivery schedule (community)
 */
export const updateDeliveryScheduleParams = zod.object({
  "id": zod.number().min(1).describe('Delivery Schedule numeric identifier')
})

export const updateDeliveryScheduleBody = zod.object({
  "is_active": zod.boolean().optional(),
  "cron_expression": zod.string().optional(),
  "delivery_time_of_day": zod.string().optional()
})

export const updateDeliveryScheduleResponse = zod.object({
  "id": zod.number(),
  "community_id": zod.string().describe('Auth0 org ID for community'),
  "is_active": zod.boolean(),
  "cron_expression": zod.string(),
  "delivery_time_of_day": zod.string()
})
