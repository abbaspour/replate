/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/organizations/{orgId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get organization details
         * @description Retrieves details for a specific organization. Caller must be a member of the organization.
         */
        get: operations['getOrganization'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update organization metadata
         * @description Updates organization details managed by Replate (e.g., addresses and schedules in D1).
         *     Only Admins of the organization may update. Auth0 org name/domain updates are not part of this API.
         */
        patch: operations['updateOrganization'];
        trace?: never;
    };
    '/jobs': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List pickup jobs for caller's organization
         * @description Lists pickup jobs filtered by the caller's organization (from `org_id` claim). Drivers may see only their assigned jobs.
         */
        get: operations['listJobs'];
        put?: never;
        /**
         * Create ad-hoc pickup job
         * @description Creates a new ad-hoc pickup job (no schedule_id). Supplier Admin/Member roles only.
         */
        post: operations['createJob'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/jobs/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update job status (driver)
         * @description Marks a job as in-progress or completed. Restricted to tokens with scope `update:pickups` and role `driver`.
         */
        patch: operations['updateJobStatus'];
        trace?: never;
    };
    '/schedules': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List pickup schedules
         * @description Fetches pickup schedules for the caller's supplier organization.
         */
        get: operations['listPickupSchedules'];
        put?: never;
        /**
         * Create pickup schedule
         * @description Creates a new recurring pickup schedule for the caller's supplier organization.
         */
        post: operations['createPickupSchedule'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/schedules/{scheduleId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update pickup schedule
         * @description Updates an existing pickup schedule.
         */
        patch: operations['updatePickupSchedule'];
        trace?: never;
    };
    '/delivery-schedules': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List delivery schedules (community)
         * @description Returns delivery schedules associated with the caller's community organization.
         */
        get: operations['listDeliverySchedules'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/delivery-schedules/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update delivery schedule (community)
         * @description Updates a delivery schedule for the caller's community organization.
         */
        patch: operations['updateDeliverySchedule'];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            error: string;
            message?: string;
        };
        /** @enum {string} */
        OrgType: 'supplier' | 'community' | 'logistics';
        Organization: {
            /** @example org_abc123 */
            auth0_org_id: string;
            org_type: components['schemas']['OrgType'];
            name: string;
            /**
             * @description Primary domain used for HRD
             * @example example.com
             */
            domain?: string;
            pickup_address?: string | null;
            delivery_address?: string | null;
            /** @description Free-form regions list or JSON */
            coverage_regions?: string | null;
            vehicle_types?: string[] | null;
            pickup_schedule?: {
                [key: string]: unknown;
            } | null;
            delivery_schedule?: {
                [key: string]: unknown;
            } | null;
        };
        OrganizationUpdateRequest: {
            metadata?: {
                pickup_address?: string;
                delivery_address?: string;
                coverage_regions?: string;
                vehicle_types?: string[];
                pickup_schedule?: {
                    [key: string]: unknown;
                };
                delivery_schedule?: {
                    [key: string]: unknown;
                };
            };
        };
        /** @enum {string} */
        JobStatus: 'New' | 'Triage' | 'Logistics Assigned' | 'In Transit' | 'Delivered' | 'Canceled';
        Job: {
            /** @example 12 */
            id: number;
            schedule_id?: number | null;
            status: components['schemas']['JobStatus'];
            /** Format: date-time */
            pickup_window_start: string;
            /** Format: date-time */
            pickup_window_end: string;
            food_category: string[];
            /** Format: float */
            estimated_weight_kg: number;
            packaging?: string | null;
            handling_notes?: string | null;
            /** @description Auth0 org ID for supplier */
            supplier_org_id: string;
            /** @description Auth0 org ID for destination community */
            community_org_id?: string | null;
            /** @description Auth0 org ID for logistics partner */
            logistics_org_id?: string | null;
            /** @description D1 user id for assigned driver */
            driver_user_id?: string | null;
        };
        JobCreateRequest: {
            /** Format: date-time */
            pickup_window_start: string;
            /** Format: date-time */
            pickup_window_end: string;
            food_category: string[];
            estimated_weight_kg: number;
            packaging?: string;
            handling_notes?: string;
            /** @description Optional destination community Auth0 org id */
            community_org_id?: string;
        };
        /** @description Only driver-triggered status transitions are supported here */
        JobUpdateRequest: {
            /** @enum {string} */
            status: 'In Transit' | 'Delivered';
        };
        PickupSchedule: {
            /** @example 101 */
            id: number;
            /** @description Auth0 org ID for supplier */
            supplier_id: string;
            default_community_id?: string | null;
            is_active: boolean;
            /** @example 0 19 * * 1-5 */
            cron_expression: string;
            /**
             * @description Time of day (HH:mm)
             * @example 19:00
             */
            pickup_time_of_day: string;
            pickup_duration_minutes: number;
            default_food_category?: string[];
            default_estimated_weight_kg?: number;
        };
        PickupScheduleCreateRequest: {
            default_community_id?: string;
            /** @default true */
            is_active: boolean;
            cron_expression: string;
            /** @example 19:00 */
            pickup_time_of_day: string;
            pickup_duration_minutes: number;
            default_food_category?: string[];
            default_estimated_weight_kg?: number;
        };
        PickupScheduleUpdateRequest: {
            default_community_id?: string;
            is_active?: boolean;
            cron_expression?: string;
            pickup_time_of_day?: string;
            pickup_duration_minutes?: number;
            default_food_category?: string[];
            default_estimated_weight_kg?: number;
        };
        DeliverySchedule: {
            /** @example 301 */
            id: number;
            /** @description Auth0 org ID for community */
            community_id: string;
            is_active: boolean;
            /** @example 0 10 * * 1 */
            cron_expression: string;
            /** @example 10:00 */
            delivery_time_of_day: string;
        };
        DeliveryScheduleUpdateRequest: {
            is_active?: boolean;
            cron_expression?: string;
            delivery_time_of_day?: string;
        };
    };
    responses: {
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
        /** @description Forbidden */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
        /** @description Not Found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
        /** @description Bad Request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
        /** @description Server error */
        ServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['Error'];
            };
        };
    };
    parameters: {
        /** @description Auth0 Organization ID (e.g., org_abc123) */
        OrgIdPathParam: string;
        /** @description Pickup Job numeric identifier */
        JobIdPathParam: number;
        /** @description Pickup Schedule numeric identifier */
        ScheduleIdPathParam: number;
        /** @description Delivery Schedule numeric identifier */
        DeliveryScheduleIdPathParam: number;
        /** @description Page number (1-based) */
        PageParam: number;
        /** @description Page size (default 20) */
        PerPageParam: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Auth0 Organization ID (e.g., org_abc123) */
                orgId: components['parameters']['OrgIdPathParam'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Organization'];
                };
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
            '5XX': components['responses']['ServerError'];
        };
    };
    updateOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Auth0 Organization ID (e.g., org_abc123) */
                orgId: components['parameters']['OrgIdPathParam'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['OrganizationUpdateRequest'];
            };
        };
        responses: {
            /** @description Updated organization */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Organization'];
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
            '5XX': components['responses']['ServerError'];
        };
    };
    listJobs: {
        parameters: {
            query?: {
                /** @description Optional filter by job status */
                status?: components['schemas']['JobStatus'];
                /** @description Page number (1-based) */
                page?: components['parameters']['PageParam'];
                /** @description Page size (default 20) */
                per_page?: components['parameters']['PerPageParam'];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of jobs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Job'][];
                };
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            '5XX': components['responses']['ServerError'];
        };
    };
    createJob: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['JobCreateRequest'];
            };
        };
        responses: {
            /** @description Job created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Job'];
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            '5XX': components['responses']['ServerError'];
        };
    };
    updateJobStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Pickup Job numeric identifier */
                id: components['parameters']['JobIdPathParam'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['JobUpdateRequest'];
            };
        };
        responses: {
            /** @description Updated job */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Job'];
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
            '5XX': components['responses']['ServerError'];
        };
    };
    listPickupSchedules: {
        parameters: {
            query?: {
                /** @description Page number (1-based) */
                page?: components['parameters']['PageParam'];
                /** @description Page size (default 20) */
                per_page?: components['parameters']['PerPageParam'];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of pickup schedules */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PickupSchedule'][];
                };
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            '5XX': components['responses']['ServerError'];
        };
    };
    createPickupSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['PickupScheduleCreateRequest'];
            };
        };
        responses: {
            /** @description Schedule created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PickupSchedule'];
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            '5XX': components['responses']['ServerError'];
        };
    };
    updatePickupSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Pickup Schedule numeric identifier */
                scheduleId: components['parameters']['ScheduleIdPathParam'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['PickupScheduleUpdateRequest'];
            };
        };
        responses: {
            /** @description Updated schedule */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PickupSchedule'];
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
            '5XX': components['responses']['ServerError'];
        };
    };
    listDeliverySchedules: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of delivery schedules */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DeliverySchedule'][];
                };
            };
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            '5XX': components['responses']['ServerError'];
        };
    };
    updateDeliverySchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Delivery Schedule numeric identifier */
                id: components['parameters']['DeliveryScheduleIdPathParam'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DeliveryScheduleUpdateRequest'];
            };
        };
        responses: {
            /** @description Updated delivery schedule */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DeliverySchedule'];
                };
            };
            400: components['responses']['BadRequest'];
            401: components['responses']['Unauthorized'];
            403: components['responses']['Forbidden'];
            404: components['responses']['NotFound'];
            '5XX': components['responses']['ServerError'];
        };
    };
}
